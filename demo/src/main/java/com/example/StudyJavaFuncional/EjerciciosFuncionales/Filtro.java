package com.example.StudyJavaFuncional.EjerciciosFuncionales;

import java.util.ArrayList;
import java.util.List;

@FunctionalInterface
public interface Filtro<T> {
    // üîµ Ejercicio 2 ‚Äì Intermedio: Filtrado de elementos con lambdas, gen√©ricos y
    // m√©todos default

    // 1. Crea una interfaz funcional gen√©rica llamada Filtro<T>
    // con un m√©todo abstracto: boolean test(T elemento);

    // 2. Dentro de la interfaz, define un m√©todo default llamado filtrar(List<T>
    // lista)
    // que recorra la lista, aplique el m√©todo test(...) a cada elemento,
    // y devuelva una nueva lista con solo los elementos que cumplan la condici√≥n.

    // 3. En el m√©todo main:
    // a) Crea una implementaci√≥n con lambda que filtre n√∫meros pares de una lista
    // de enteros.
    // Ejemplo: n -> n % 2 == 0

    // b) Crea otra implementaci√≥n con lambda que filtre strings que empiecen por
    // vocal (a, e, i, o, u).
    // Ejemplo: s -> s.toLowerCase().matches("^[aeiou].*")

    // 4. Usa el m√©todo filtrar(...) para aplicar ambos filtros a listas diferentes
    // y muestra los resultados por consola.

    // Resultado: Aprender√°s a combinar lambdas con l√≥gica condicional,
    // gen√©ricos y procesamiento funcional de listas.

    boolean test(T elemento);

    default List<T> filtrar(List<T> lista) {
        List<T> filtrada = new ArrayList<>();
        for (T elem : lista) {
            if (test(elem)){
              filtrada.add(elem);
            }
        }
        return filtrada;
    }
}
